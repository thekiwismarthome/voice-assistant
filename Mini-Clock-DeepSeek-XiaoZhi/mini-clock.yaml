## Resources
# Weather Icons by https://github.com/qwd/WeatherIcon
# Original ESPHome code https://community.home-assistant.io/t/low-cost-esp32-voice-platforms/864438/23
# And yes, I used AI for a alot of it.
# HA Community [Low cost ESP32 voice platforms https://community.home-assistant.io/t/low-cost-esp32-voice-platforms/864438
# HA Community [SpotPear “DeepSeek Voice Chat” config https://community.home-assistant.io/t/spotpear-deepseek-voice-chat-config/877927

substitutions:
  name: mini-clock
  friendly_name: Mini Clock
  board: esp32-s3-devkitc-1
  area: Office
  device_description: 'DeepSeek XiaoZhi AI Voice Chat Robot ESP32-S3 1.28 inch LCD N16R8 Development Board Astronaut Clock Desktop Ornament'
  current_weather: weather.home_2
  screensaver: 30min
  static_ip: 192.168.0.130

  loading_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/loading_320_240.png
  idle_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/idle_320_240.png
  listening_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/listening_320_240.png
  thinking_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/thinking_320_240.png
  replying_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/replying_320_240.png
  error_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/error_320_240.png
  timer_finished_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/casita/timer_finished_320_240.png
  error_no_wifi_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/error_box_illustrations/error-no-wifi.png
  error_no_ha_illustration_file: https://github.com/esphome/wake-word-voice-assistants/raw/main/error_box_illustrations/error-no-ha.png

  weather_img_clear_night: "static/images/weather_real/clear-night.png"
  weather_img_cloudy: "static/images/weather_real/cloudy.png"
  weather_img_fog: "static/images/weather_real/fog.png"
  weather_img_hail: "static/images/weather_real/hail.png"
  weather_img_lightning: "static/images/weather_real/lightning.png"
  weather_img_lightning_rainy: "static/images/weather_real/lightning-rainy.png"
  weather_img_partlycloudy: "static/images/weather_real/partlycloudy.png"
  weather_img_pouring: "static/images/weather_real/pouring.png"
  weather_img_rainy: "static/images/weather_real/rainy.png"
  weather_img_snowy: "static/images/weather_real/snowy.png"
  weather_img_sunny: "static/images/weather_real/sunny.png"
  weather_img_windy: "static/images/weather_real/windy.png"
  weather_img_exceptional: "static/images/weather_real/exceptional.png"
  weather_img_unknown: "static/images/weather_real/unknown.png"

  loading_illustration_background_color: "000000"
  idle_illustration_background_color: "000000"
  listening_illustration_background_color: "F2F4F9"
  thinking_illustration_background_color: "F2F4F9"
  replying_illustration_background_color: "F2F4F9"
  error_illustration_background_color: "000000"
  timer_finished_background_color: "F2F4F9"

  voice_assist_idle_phase_id: "1"
  voice_assist_listening_phase_id: "2"
  voice_assist_thinking_phase_id: "3"
  voice_assist_replying_phase_id: "4"
  voice_assist_not_ready_phase_id: "10"
  voice_assist_error_phase_id: "11"
  voice_assist_muted_phase_id: "12"
  voice_assist_timer_finished_phase_id: "20"

  # These unique characters have been extracted from every test file of every language available on https://github.com/home-assistant/intents (14 March 2024)
  # However, the Figtree font only contains Latin characters, so there is no point using this... unlessyou change the font configuration accordingly.
  allowed_characters: " !#%'()+,-./0123456789:;<>?@ABCDEFGHIJKLMNOPQRSTUVWYZ[]_abcdefghijklmnopqrstuvwxyz{|}°²³µ¿ÁÂÄÅÉÖÚßàáâãäåæçèéêëìíîðñòóôõöøùúûüýþāăąćčďĐđēėęěğĮįıļľŁłńňőřśšťũūůűųźŻżŽžơưșțΆΈΌΐΑΒΓΔΕΖΗΘΚΜΝΠΡΣΤΥΦάέήίαβγδεζηθικλμνξοπρςστυφχψωϊόύώАБВГДЕЖЗИКЛМНОПРСТУХЦЧШЪЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюяёђєіїјљњћאבגדהוזחטיכלםמןנסעפץצקרשת،ءآأإئابةتجحخدذرزسشصضطظعغفقكلمنهوىيٹپچڈکگںھہیےংকচতধনফবযরলশষস়ািু্చయలిెొ్ംഅആഇഈഉഎഓകഗങചജഞടഡണതദധനപഫബഭമയരറലളവശസഹാിീുൂെേൈ്ൺൻർൽൾაბგდევზთილმნოპრსტუფქყშჩცძჭხạảấầẩậắặẹẽếềểệỉịọỏốồổỗộớờởợụủứừửữựỳ—、一上不个中为主乾了些亮人任低佔何作供依侧係個側偵充光入全关冇冷几切到制前動區卧厅厨及口另右吊后吗启吸呀咗哪唔問啟嗎嘅嘛器圍在场執場外多大始安定客室家密寵对將小少左已帘常幫幾库度庫廊廚廳开式後恆感態成我戲戶户房所扇手打执把拔换掉控插摄整斯新明是景暗更最會有未本模機檯櫃欄次正氏水沒没洗活派温測源溫漏潮激濕灯為無煙照熱燈燥物狀玄现現瓦用發的盞目着睡私空窗立笛管節簾籬紅線红罐置聚聲脚腦腳臥色节著行衣解設調請謝警设调走路車车运連遊運過道邊部都量鎖锁門閂閉開關门闭除隱離電震霧面音頂題顏颜風风食餅餵가간감갔강개거게겨결경고공과관그금급기길깥꺼껐꼽나난내네놀누는능니다닫담대더데도동됐되된됨둡드든등디때떤뜨라래러렇렌려로료른를리림링마많명몇모무문물뭐바밝방배변보부불블빨뽑사산상색서설성세센션소쇼수스습시신실싱아안않알았애야어얼업없었에여연열옆오온완외왼요운움워원위으은을음의이인일임입있작잠장재전절정제져조족종주줄중줘지직진짐쪽차창천최추출충치침커컴켜켰쿠크키탁탄태탬터텔통트튼티파팬퍼폰표퓨플핑한함해했행혀현화활후휴힘，？"

  # Add support for non-unicode characters by using better glyphset
  font_glyphsets: "GF_Latin_Core"
  # for Greek use "Noto Sans" for other languages use a compatible font family
  font_family: Figtree

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.5.0
  name_add_mac_suffix: true
  on_boot:
    priority: 600
    then:
      - script.execute: draw_display
      - delay: 30s
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: draw_display

esp32:
  board: ${board}
  flash_size: 16MB
  cpu_frequency: 240MHz
  framework:
    type: ESP-IDF
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"

# esp32_ble_tracker:
#   scan_parameters:
# # Adjust timing if the defaults do not work in your environment
# #    interval: 1100ms
# #    window: 1100ms
#     active: true

# bluetooth_proxy:
#   active: true

psram:
  mode: octal
  speed: 80MHz

# Common settings to all my devices
logger:
  level: DEBUG

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_encryption
  on_client_connected:
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: draw_display

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: ${static_ip}
    gateway: 192.168.0.1
    subnet: 255.255.255.0
    dns1: 192.168.0.20
    dns2: 192.168.0.21
  on_connect:
    - script.execute: draw_display
  on_disconnect:
    - script.execute: draw_display

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${name} Hotspot"
    password: !secret ota_password

captive_portal:

button:
  - platform: factory_reset
    id: factory_reset_btn
    internal: true

binary_sensor:
  - platform: gpio
    pin:
      number: GPIO0
      mode: INPUT_PULLUP
      inverted: true
    id: left_top_button
    internal: true
    on_multi_click:
      - timing:
          - ON for at least 50ms
          - OFF for at least 50ms
        then:
          - switch.turn_off: timer_ringing
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn

output:
  - platform: ledc
    pin: GPIO3
    id: backlight_output
# onboard LED light

light:
  - platform: monochromatic
    id: led
    name: Screen
    icon: "mdi:television"
    entity_category: config
    output: backlight_output
    restore_mode: RESTORE_DEFAULT_ON
    default_transition_length: 250ms

  - platform: esp32_rmt_led_strip
    name: none
    disabled_by_default: false
    entity_category: config
    pin: GPIO48
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 1
    rgb_order: grb
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%
      - addressable_rainbow:
      - strobe:
          name: Police Effect
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 0%
              blue: 0%
              duration: 400ms
            - state: true
              brightness: 100%
              red: 0%
              green: 0%
              blue: 100%
              duration: 400ms
#speaker and microphone

i2s_audio:
  - id: i2s_mic # For microphone
    i2s_lrclk_pin: GPIO4 #WS 
    i2s_bclk_pin: GPIO5  #SCK
  - id: i2s_audio_bus # For speaker
    i2s_lrclk_pin: GPIO16
    i2s_bclk_pin: GPIO15

microphone:
  - platform: i2s_audio
    i2s_audio_id: i2s_mic
    sample_rate: 16000
    adc_type: external
    i2s_din_pin: GPIO6 #SD
    id: box_mic
    channel: stereo
    pdm: false
    bits_per_sample: 16bit

speaker:
  - platform: i2s_audio
    id: box_speaker
    i2s_audio_id: i2s_audio_bus
    dac_type: external
    sample_rate: 48000
    i2s_dout_pin:   
      number: GPIO7 # DIN Pin of the MAX98357A Audio Amplifier
    channel: left
    buffer_duration: 1000ms

media_player:
  - platform: speaker
    name: None
    id: speaker_media_player
    volume_min: 0.5
    volume_max: 0.8
    buffer_size: 2000000
    announcement_pipeline:
      speaker: box_speaker
      format: FLAC #WAV
      sample_rate: 48000
      num_channels: 1  # S3 Box only has one output channel
    files:
      - id: timer_finished_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/timer_finished.flac
    on_announcement:
      # Stop the wake word (mWW or VA) if the mic is capturing
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
            # Ensure VA stops before moving on
            - if:
                condition:
                  - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                then:
                  - wait_until:
                      - not:
                          voice_assistant.is_running:
      # Since VA isn't running, this is user-intiated media playback. Draw the mute display
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
            - script.execute: draw_display
    on_idle:
      # Since VA isn't running, this is the end of user-intiated media playback. Restart the wake word.
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - script.execute: start_wake_word
            - script.execute: set_idle_or_mute_phase
            - script.execute: draw_display

switch:
  - platform: gpio
    name: Speaker Enable
    pin: GPIO46
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    disabled_by_default: true
  - platform: template
    name: Mute
    id: mute
    icon: "mdi:microphone-off"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - microphone.unmute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
      - script.execute: draw_display
    on_turn_on:
      - microphone.mute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
      - script.execute: draw_display
  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      # Turn off the repeat mode and disable the pause between playlist items
      - lambda: |-
              id(speaker_media_player)
                ->make_call()
                .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
                .set_announcement(true)
                .perform();
              id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      # Stop playing the alarm
      - media_player.stop:
          announcement: true
    on_turn_on:
      # Turn on the repeat mode and pause for 1000 ms between playlist items/repeats
      - lambda: |-
            id(speaker_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_sound
          announcement: true
      - delay: 15min
      - switch.turn_off: timer_ringing

script:
  - id: draw_display
    then:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        api.connected:
                      then:
                        - lambda: |
                            switch(id(voice_assistant_phase)) {
                              case ${voice_assist_listening_phase_id}:
                                id(s3_box_lcd).show_page(listening_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_thinking_phase_id}:
                                id(s3_box_lcd).show_page(thinking_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_replying_phase_id}:
                                id(s3_box_lcd).show_page(replying_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_error_phase_id}:
                                id(s3_box_lcd).show_page(error_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_muted_phase_id}:
                                id(s3_box_lcd).show_page(muted_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_not_ready_phase_id}:
                                id(s3_box_lcd).show_page(no_ha_page);
                                id(s3_box_lcd).update();
                                break;
                              case ${voice_assist_timer_finished_phase_id}:
                                id(s3_box_lcd).show_page(timer_finished_page);
                                id(s3_box_lcd).update();
                                break;
                              default:
                                id(s3_box_lcd).show_page(idle_page);
                                id(s3_box_lcd).update();
                            }
                      else:
                        - display.page.show: no_ha_page
                        - component.update: s3_box_lcd
                else:
                  - display.page.show: no_wifi_page
                  - component.update: s3_box_lcd
          else:
            - display.page.show: initializing_page
            - component.update: s3_box_lcd

  - id: fetch_first_active_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.is_active && iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_active_timer) = output_timer;
  - id: check_if_timers_active
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            for (auto &iterable_timer : timers) {
              if(iterable_timer.second.is_active) {
                output = true;
              }
            }
          }
          id(global_is_timer_active) = output;
  - id: fetch_first_timer
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          auto output_timer = timers.begin()->second;
          for (auto &iterable_timer : timers) {
            if (iterable_timer.second.seconds_left <= output_timer.seconds_left) {
              output_timer = iterable_timer.second;
            }
          }
          id(global_first_timer) = output_timer;
  - id: check_if_timers
    then:
      - lambda: |
          const auto timers = id(va).get_timers();
          bool output = false;
          if (timers.size() > 0) {
            output = true;
          }
          id(global_is_timer) = output;

  - id: draw_timer_timeline
    then:
      - lambda: |
          id(check_if_timers_active).execute();
          id(check_if_timers).execute();
          if (id(global_is_timer_active)){
            id(fetch_first_active_timer).execute();
            int active_pixels = round( 320 * id(global_first_active_timer).seconds_left / max(id(global_first_active_timer).total_seconds , static_cast<uint32_t>(1)) );
            if (active_pixels > 0){
              id(s3_box_lcd).filled_rectangle(0 , 225 , 320 , 15 , Color::WHITE );
              id(s3_box_lcd).filled_rectangle(0 , 226 , active_pixels , 13 , id(active_timer_color) );
            }
          } else if (id(global_is_timer)){
            id(fetch_first_timer).execute();
            int active_pixels = round( 320 * id(global_first_timer).seconds_left / max(id(global_first_timer).total_seconds , static_cast<uint32_t>(1)));
            if (active_pixels > 0){
              id(s3_box_lcd).filled_rectangle(0 , 225 , 320 , 15 , Color::WHITE );
              id(s3_box_lcd).filled_rectangle(0 , 226 , active_pixels , 13 , id(paused_timer_color) );
            }
          }
  - id: draw_active_timer_widget
    then:
      - lambda: |
          id(check_if_timers_active).execute();
          if (id(global_is_timer_active)){
            id(s3_box_lcd).filled_rectangle(80 , 40 , 160 , 50 , Color::WHITE );
            id(s3_box_lcd).rectangle(80 , 40 , 160 , 50 , Color::BLACK );

            id(fetch_first_active_timer).execute();
            int hours_left = floor(id(global_first_active_timer).seconds_left / 3600);
            int minutes_left = floor((id(global_first_active_timer).seconds_left - hours_left * 3600) / 60);
            int seconds_left = id(global_first_active_timer).seconds_left - hours_left * 3600 - minutes_left * 60 ;
            auto display_hours = (hours_left < 10 ? "0" : "") + std::to_string(hours_left);
            auto display_minute = (minutes_left < 10 ? "0" : "") + std::to_string(minutes_left);
            auto display_seconds = (seconds_left  < 10 ? "0" : "") + std::to_string(seconds_left) ;

            std::string display_string = "";
            if (hours_left > 0) {
              display_string = display_hours + ":" + display_minute;
            } else {
              display_string = display_minute + ":" + display_seconds;
            }
            id(s3_box_lcd).printf(120, 47, id(font_timer), Color::BLACK, "%s", display_string.c_str());
          }
  # Starts either mWW or the streaming wake word, depending on the configured location
  - id: start_wake_word
    then:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - micro_wake_word.start:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
  # Stops either mWW or the streaming wake word, depending on the configured location
  - id: stop_wake_word
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - micro_wake_word.stop:
  # Set the voice assistant phase to idle or muted, depending on if the software mute switch is activated
  - id: set_idle_or_mute_phase
    then:
      - if:
          condition:
            switch.is_off: mute
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
          else:
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    icon: "mdi:account-voice"
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - wait_until:
                lambda: return id(voice_assistant_phase) == ${voice_assist_muted_phase_id} || id(voice_assistant_phase) == ${voice_assist_idle_phase_id};
            - if:
                condition:
                  lambda: return x == "In Home Assistant";
                then:
                  - micro_wake_word.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - lambda: id(va).set_use_wake_word(true);
                        - voice_assistant.start_continuous:
            - if:
                condition:
                  lambda: return x == "On device";
                then:
                  - lambda: id(va).set_use_wake_word(false);
                  - voice_assistant.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - micro_wake_word.start

time:
  - platform: sntp
    id: ha_time
    timezone: "Pacific/Auckland"

spi:
  clk_pin: GPIO14 # SCL pin
  mosi_pin: GPIO17 # SDA pin
  interface: hardware
  id: spihwd

# font for digital clock

font:
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
      italic: true
    id: font_request
    size: 15
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_response
    size: 15
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_timer
    size: 30
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_temp_large
    size: 30
    glyphsets:
      - ${font_glyphsets}
  - file:
      type: gfonts
      family: ${font_family}
      weight: 300
    id: font_temp_small
    size: 20
    glyphsets:
      - ${font_glyphsets}

sensor:
  - platform: homeassistant
    id: current_temperature
    entity_id: weather.home_2
    attribute: temperature

text_sensor:
  - platform: homeassistant
    id: current_forecast
    entity_id: weather.home_2
    #attribute: condition
  - id: text_request
    platform: template
    on_value:
      lambda: |-
        if(id(text_request).state.length()>32) {
          std::string name = id(text_request).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_request).state = (truncated+"...").c_str();
        }

  - id: text_response
    platform: template
    on_value:
      lambda: |-
        if(id(text_response).state.length()>32) {
          std::string name = id(text_response).state.c_str();
          std::string truncated = esphome::str_truncate(name.c_str(),31);
          id(text_response).state = (truncated+"...").c_str();
        }

color:
  - id: idle_color
    hex: ${idle_illustration_background_color}
  - id: listening_color
    hex: ${listening_illustration_background_color}
  - id: thinking_color
    hex: ${thinking_illustration_background_color}
  - id: replying_color
    hex: ${replying_illustration_background_color}
  - id: loading_color
    hex: ${loading_illustration_background_color}
  - id: error_color
    hex: ${error_illustration_background_color}
  - id: active_timer_color
    hex: "26ed3a"
  - id: paused_timer_color
    hex: "3b89e3"

# image for background needs to be in /homeassistant/esphome/images/

image:
  rgb565:
    - file: ${error_illustration_file}
      id: images_error
      resize: 200x200
      transparency: alpha_channel
    - file: ${idle_illustration_file}
      id: images_idle
      resize: 200x200
      transparency: alpha_channel
    - file: ${listening_illustration_file}
      id: images_listening
      resize: 200x200
      transparency: alpha_channel
    - file: ${thinking_illustration_file}
      id: images_thinking
      resize: 200x200
      transparency: alpha_channel
    - file: ${replying_illustration_file}
      id: images_replying
      resize: 200x200
      transparency: alpha_channel
    - file: ${timer_finished_illustration_file}
      id: images_timer_finished
      resize: 200x200
      transparency: alpha_channel
    - file: ${loading_illustration_file}
      id: images_initializing
      resize: 200x200
      transparency: alpha_channel
    - file: ${error_no_wifi_illustration_file}
      id: error_no_wifi
      resize: 200x200
      transparency: alpha_channel
    - file: ${error_no_ha_illustration_file}
      id: error_no_ha
      resize: 200x200
      transparency: alpha_channel

      # Weather Images 🌦️ 
    - file: ${weather_img_clear_night}
      id: img_clear_night
      resize: 150x150
      transparency: alpha_channel
    - file: ${weather_img_cloudy}
      id: img_cloudy
      resize: 150x150
      transparency: alpha_channel
    - file: ${weather_img_fog}
      id: img_fog
      resize: 150x150
      transparency: alpha_channel
    - file: ${weather_img_hail}
      id: img_hail
      resize: 150x150
      transparency: alpha_channel
    - file: ${weather_img_lightning}
      id: img_lightning
      resize: 150x150
      transparency: alpha_channel
    - file: ${weather_img_lightning_rainy}
      id: img_lightning_rainy
      resize: 150x150
      transparency: alpha_channel
    - file: ${weather_img_partlycloudy}
      id: img_partlycloudy
      resize: 150x150
      transparency: alpha_channel
    - file: ${weather_img_pouring}
      id: img_pouring
      resize: 150x150
      transparency: alpha_channel
    - file: ${weather_img_rainy}
      id: img_rainy
      resize: 150x150
      transparency: alpha_channel
    - file: ${weather_img_snowy}
      id: img_snowy
      resize: 150x150
      transparency: alpha_channel
    - file: ${weather_img_sunny}
      id: img_sunny
      resize: 150x150
      transparency: alpha_channel
    - file: ${weather_img_windy}
      id: img_windy
      resize: 150x150
      transparency: alpha_channel
    - file: ${weather_img_exceptional}
      id: img_exceptional
      resize: 150x150
      transparency: alpha_channel
    - file: ${weather_img_unknown}
      id: img_unknown
      resize: 150x150
      transparency: alpha_channel

display:
  - platform: ili9xxx
    id: s3_box_lcd
    model: GC9A01A
    invert_colors: true
    data_rate: 40MHz
    rotation: 0
    reset_pin: GPIO18 # RST pin
    cs_pin: GPIO13 # CS pin
    dc_pin: GPIO10 # DC pin
    update_interval: 1s
    dimensions:
        height: 240
        width: 240
    pages:
      - id: idle_page
        lambda: |-
          
          auto black = Color(0, 0, 0);
          auto red = Color(255, 0, 0);
          auto green = Color(0, 255, 0);
          auto blue = Color(0, 0, 255);
          auto white = Color(255, 255, 255);
          auto center_x = it.get_width() / 2;
          auto center_y = it.get_height() / 2;
          int radius = 100;

          // Get current time
          auto time = id(ha_time).now();

          // Skip everything if time is not valid
          if (!time.is_valid()) {
            it.fill(black);
            it.printf(center_x, center_y, id(font_response), red, TextAlign::CENTER, "No Time");
            return;
          }
          // ✅ Time is valid — continue as normal
          int h = time.hour % 12;
          int m = time.minute;
          int s = time.second;

          // Clear screen
          it.fill(black);

          // 🟡 Temperature (°C) top-left
          if (!isnan(id(current_temperature).state)) {
            float temperature = id(current_temperature).state;
            // Render temperature number (large font)
            int temp_x = center_x - radius / 2 - 10;
            int temp_y = center_y - radius / 2;
            it.printf(temp_x, temp_y, id(font_temp_large), white, TextAlign::LEFT, "%.0f", temperature);

            // Render °C symbol (smaller font, positioned after temperature)
            int degree_x = temp_x + 40;  // Adjust based on expected text width (e.g., 2-3 digits)
            int degree_y = temp_y - 1;  // Shift upward for superscript effect
            it.printf(degree_x, degree_y, id(font_temp_small), white, TextAlign::LEFT, "°C");
          }

          // 🌦️ Forecast Icon (top-right)
          std::string condition = id(current_forecast).state;

          //This is used for CENTRE and Large
          int icon_x = center_x;
          int icon_y = center_y;

          //This was used for top right of the screenThis was used for top right of the screen
          //int icon_x = center_x + radius + radius /2 + 20;
          //int icon_y = center_y - radius - radius / 2;

          if (condition == "clear-night") {
            it.image(icon_x, icon_y, id(img_clear_night), ImageAlign::CENTER);
          } else if (condition == "cloudy") {
            it.image(icon_x, icon_y, id(img_cloudy), ImageAlign::CENTER);
          } else if (condition == "fog") {
            it.image(icon_x, icon_y, id(img_fog), ImageAlign::CENTER);
          } else if (condition == "hail") {
            it.image(icon_x, icon_y, id(img_hail), ImageAlign::CENTER);
          } else if (condition == "lightning") {
            it.image(icon_x, icon_y, id(img_lightning), ImageAlign::CENTER);
          } else if (condition == "lightning-rainy") {
            it.image(icon_x, icon_y, id(img_lightning_rainy), ImageAlign::CENTER);
          } else if (condition == "partlycloudy" || condition == "partly-cloudy") {
            it.image(icon_x, icon_y, id(img_partlycloudy), ImageAlign::CENTER);
          } else if (condition == "pouring") {
            it.image(icon_x, icon_y, id(img_pouring), ImageAlign::CENTER);
          } else if (condition == "rainy") {
            it.image(icon_x, icon_y, id(img_rainy), ImageAlign::CENTER);
          } else if (condition == "snowy") {
            it.image(icon_x, icon_y, id(img_snowy), ImageAlign::CENTER);
          } else if (condition == "sunny") {
            it.image(icon_x, icon_y, id(img_sunny), ImageAlign::CENTER);
          } else if (condition == "windy" || condition == "windy-variant") {
            it.image(icon_x, icon_y, id(img_windy), ImageAlign::CENTER);
          } else if (condition == "exceptional") {
            it.image(icon_x, icon_y, id(img_exceptional), ImageAlign::CENTER);
          } else {
            it.image(icon_x, icon_y, id(img_unknown), ImageAlign::CENTER);
          }

          // Clock outline
          //it.circle(center_x, center_y, radius, white);

          // Hour tick marks, excluding 3, 6, 9, 12
          int tick_length = 10; // Example value, adjust as needed

          for (int i = 0; i < 12; i++) {
              if (i % 3 == 0) continue;  // Skip positions where numerals are shown
              float angle = i * 30.0 * M_PI / 180.0;
              float dx = sin(angle);  // perpendicular unit vector x
              float dy = -cos(angle); // perpendicular unit vector y
              int x1 = center_x + cos(angle) * radius;
              int y1 = center_y + sin(angle) * radius;
              int x2 = center_x + cos(angle) * (radius + tick_length);
              int y2 = center_y + sin(angle) * (radius + tick_length);
              it.line(x1, y1, x2, y2, white);

              int thickness = 3;  // Number of pixels wide

              for (int t = -thickness / 2; t <= thickness / 2; t++) {
                  it.line(
                      x1 + dx * t,
                      y1 + dy * t,
                      x2 + dx * t,
                      y2 + dy * t,
                      white
                  );
              }
          }

          // Draw numerals 3, 6, 9, 12
          it.printf(center_x + radius, center_y, id(font_timer), white, TextAlign::CENTER, "3");
          it.printf(center_x, center_y + radius, id(font_timer), white, TextAlign::CENTER, "6");
          it.printf(center_x - radius, center_y, id(font_timer), white, TextAlign::CENTER, "9");
          it.printf(center_x, center_y - radius, id(font_timer), white, TextAlign::CENTER, "12");


          // Hour hand
          float h_angle = ((h + m / 60.0) * 30.0 - 90.0) * M_PI / 180.0;

          // Hand length and hour_hand_thickness
          float hand_length = radius * 0.5;
          int hour_hand_thickness = 5;  // thickness in pixels

          // Perpendicular vector
          float hh_dx = sin(h_angle);   // perpendicular X
          float hh_dy = -cos(h_angle);  // perpendicular Y

          // Draw multiple lines to simulate thickness
          for (int t = -hour_hand_thickness / 2; t <= hour_hand_thickness / 2; t++) {
              it.line(
                  center_x + hh_dx * t,
                  center_y + hh_dy * t,
                  center_x + hh_dx * t + cos(h_angle) * hand_length,
                  center_y + hh_dy * t + sin(h_angle) * hand_length,
                  white
              );
          }

          // Minute hand
          float m_angle = ((m + s / 60.0) * 6.0 - 90.0) * M_PI / 180.0;

          // Minute hand length and minute_hand_thickness
          float minute_hand_length = radius * 0.75;
          int minute_hand_thickness = 3;  // Adjust for desired width

          // Perpendicular vector
          float mh_dx = sin(m_angle);   // perpendicular X
          float mh_dy = -cos(m_angle);  // perpendicular Y

          // Draw parallel lines for minute_hand_thickness
          for (int t = -minute_hand_thickness / 2; t <= minute_hand_thickness / 2; t++) {
              it.line(
                  center_x + mh_dx * t,
                  center_y + mh_dy * t,
                  center_x + mh_dx * t + cos(m_angle) * minute_hand_length,
                  center_y + mh_dy * t + sin(m_angle) * minute_hand_length,
                  white
              );
          }

          // Second hand
          float s_angle = (s * 6.0 - 90.0) * M_PI / 180.0;
          it.line(center_x, center_y,
                  center_x + cos(s_angle) * (radius * 0.9),
                  center_y + sin(s_angle) * (radius * 0.9),
                  red);

          // Center dot
          it.filled_circle(center_x, center_y, 3, red);
          
          // ⏰ Day and date
          std::string day_str = time.strftime("%a");
          std::string date_str = time.strftime("%d %b");

          it.printf(center_x, center_y + radius - 70, id(font_timer), white, TextAlign::CENTER, "%s", day_str.c_str());
          it.printf(center_x, center_y + radius - 45, id(font_timer), white, TextAlign::CENTER, "%s", date_str.c_str());


      - id: listening_page
        lambda: |-
          it.fill(id(listening_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(images_listening), ImageAlign::CENTER);
          id(draw_timer_timeline).execute();
      - id: thinking_page
        lambda: |-
          it.fill(id(thinking_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(images_thinking), ImageAlign::CENTER);
          it.filled_rectangle(20 , 20 , 280 , 30 , Color::WHITE );
          it.rectangle(20 , 20 , 280 , 30 , Color::BLACK );
          it.printf(30, 25, id(font_request), Color::BLACK, "%s", id(text_request).state.c_str());
          id(draw_timer_timeline).execute();
      - id: replying_page
        lambda: |-
          it.fill(id(replying_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(images_replying), ImageAlign::CENTER);
          it.filled_rectangle(20 , 20 , 280 , 30 , Color::WHITE );
          it.rectangle(20 , 20 , 280 , 30 , Color::BLACK );
          it.filled_rectangle(20 , 190 , 280 , 30 , Color::WHITE );
          it.rectangle(20 , 190 , 280 , 30 , Color::BLACK );
          it.printf(30, 25, id(font_request), Color::BLACK, "%s", id(text_request).state.c_str());
          it.printf(30, 195, id(font_response), Color::BLACK, "%s", id(text_response).state.c_str());
          id(draw_timer_timeline).execute();
      - id: timer_finished_page
        lambda: |-
          it.fill(id(idle_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(images_timer_finished), ImageAlign::CENTER);
      - id: error_page
        lambda: |-
          it.fill(id(error_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(images_error), ImageAlign::CENTER);
      - id: no_ha_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_ha), ImageAlign::CENTER);
      - id: no_wifi_page
        lambda: |-
          it.image((it.get_width() / 2), (it.get_height() / 2), id(error_no_wifi), ImageAlign::CENTER);
      - id: initializing_page
        lambda: |-
          it.fill(id(loading_color));
          it.image((it.get_width() / 2), (it.get_height() / 2), id(images_initializing), ImageAlign::CENTER);
      - id: muted_page
        lambda: |-
          it.fill(Color::BLACK);
          id(draw_timer_timeline).execute();
          id(draw_active_timer_widget).execute();

micro_wake_word:
  id: mww
  models:
    - okay_nabu
    - hey_mycroft
    - hey_jarvis
  on_wake_word_detected:
    - voice_assistant.start:
        wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: box_mic
  media_player: speaker_media_player
  micro_wake_word: mww
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  on_listening:
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    - text_sensor.template.publish:
        id: text_request
        state: "..."
    - text_sensor.template.publish:
        id: text_response
        state: "..."
    - script.execute: draw_display
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: draw_display
  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda return x;
    - script.execute: draw_display
  on_tts_start:
    - text_sensor.template.publish:
        id: text_response
        state: !lambda return x;
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: draw_display
  on_end:
    # Wait a short amount of time to see if an announcement starts
    - wait_until:
        condition:
          - media_player.is_announcing:
        timeout: 0.5s
    # Announcement is finished and the I2S bus is free
    - wait_until:
        - and:
            - not:
                media_player.is_announcing:
            - not:
                speaker.is_playing:
    # Restart only mWW if enabled; streaming wake words automatically restart
    - if:
        condition:
          - lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - lambda: id(va).set_use_wake_word(false);
          - micro_wake_word.start:
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
    # Clear text sensors
    - text_sensor.template.publish:
        id: text_request
        state: ""
    - text_sensor.template.publish:
        id: text_response
        state: ""
  on_error:
    - if:
        condition:
          lambda: return !id(init_in_progress);
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - script.execute: draw_display
          - delay: 1s
          - if:
              condition:
                switch.is_off: mute
              then:
                - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
              else:
                - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
          - script.execute: draw_display
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - script.execute: start_wake_word
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: stop_wake_word
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: draw_display
  on_timer_started:
    - script.execute: draw_display
  on_timer_cancelled:
    - script.execute: draw_display
  on_timer_updated:
    - script.execute: draw_display
  on_timer_tick:
    - script.execute: draw_display
  on_timer_finished:
    - switch.turn_on: timer_ringing
    - wait_until:
        media_player.is_announcing:
    - lambda: id(voice_assistant_phase) = ${voice_assist_timer_finished_phase_id};
    - script.execute: draw_display

globals:
  - id: init_in_progress
    type: bool
    restore_value: false
    initial_value: "true"
  - id: voice_assistant_phase
    type: int
    restore_value: false
    initial_value: ${voice_assist_not_ready_phase_id}
  - id: global_first_active_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer_active
    type: bool
    restore_value: false
  - id: global_first_timer
    type: voice_assistant::Timer
    restore_value: false
  - id: global_is_timer
    type: bool
    restore_value: false
